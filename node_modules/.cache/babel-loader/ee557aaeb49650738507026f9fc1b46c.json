{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _defaults = require('./defaults');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _helpers = require('./helpers');\n\nvar _Overlay = require('./Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The `tmpSrc` and `TmpImg` code here is a workaround\n * for a longstanding Firefox issue where replacing the\n * `src` of an `<img>` tag requires calculations and\n * results in a \"flicker\" of sorts.\n *\n * See https://github.com/rpearce/react-medium-image-zoom/issues/96\n * for further details.\n */\n\n\nvar Zoom = function (_Component) {\n  _inherits(Zoom, _Component);\n\n  function Zoom(props) {\n    _classCallCheck(this, Zoom);\n\n    var _this = _possibleConstructorReturn(this, (Zoom.__proto__ || Object.getPrototypeOf(Zoom)).call(this, props));\n\n    _this.state = {\n      hasLoaded: false,\n      isZoomed: true,\n      src: props.image.currentSrc || props.image.src,\n      tmpSrc: null\n    };\n    _this.unzoom = _this.unzoom.bind(_this);\n    _this._handleImageLoad = _this._handleImageLoad.bind(_this);\n    return _this;\n  }\n\n  _createClass(Zoom, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props$zoomImage = this.props.zoomImage,\n          src = _props$zoomImage.src,\n          srcSet = _props$zoomImage.srcSet;\n      this.setState({\n        hasLoaded: true\n      });\n\n      if (src || srcSet) {\n        (0, _helpers.fetchImage)(this.props.zoomImage, this._handleImageLoad);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this; // If we have a `tmpSrc`, wait and then give it to `src`\n\n\n      if (!prevState.tmpSrc && this.state.tmpSrc) {\n        setTimeout(function () {\n          _this2.setState({\n            src: _this2.state.tmpSrc,\n            tmpSrc: null\n          });\n        }, 100);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          defaultStyles = _props.defaultStyles,\n          zoomImage = _props.zoomImage,\n          _state = this.state,\n          tmpSrc = _state.tmpSrc,\n          isZoomed = _state.isZoomed,\n          src = _state.src;\n\n      var style = this._getZoomImageStyle();\n\n      return _react2.default.createElement('div', {\n        style: this._getZoomContainerStyle()\n      }, _react2.default.createElement(_Overlay2.default, {\n        isVisible: isZoomed,\n        defaultStyles: defaultStyles\n      }), _react2.default.createElement('img', _extends({}, zoomImage, {\n        src: src,\n        style: style\n      })), _react2.default.createElement(TmpImg, _extends({}, zoomImage, {\n        src: tmpSrc,\n        style: style\n      })));\n    }\n  }, {\n    key: 'unzoom',\n    value: function unzoom(allowRefocus) {\n      var onUnzoom = this.props.onUnzoom(this.state.src, allowRefocus);\n      this.setState({\n        isZoomed: false\n      }, function () {\n        return setTimeout(onUnzoom, _defaults2.default.transitionDuration);\n      });\n    }\n  }, {\n    key: '_handleImageLoad',\n    value: function _handleImageLoad(img) {\n      // Only set state if component is still mounted\n      if (this.state.isZoomed) {\n        this.setState({\n          tmpSrc: img.currentSrc || img.src\n        });\n      }\n    }\n  }, {\n    key: '_getZoomContainerStyle',\n    value: function _getZoomContainerStyle() {\n      return _extends({}, _defaults2.default.styles.zoomContainer, this.props.defaultStyles.zoomContainer);\n    }\n  }, {\n    key: '_getZoomImageStyle',\n    value: function _getZoomImageStyle() {\n      var _props2 = this.props,\n          image = _props2.image,\n          shouldRespectMaxDimension = _props2.shouldRespectMaxDimension,\n          src = _props2.src,\n          zoomMargin = _props2.zoomMargin;\n      var imageOffset = image.getBoundingClientRect();\n      var top = imageOffset.top,\n          left = imageOffset.left;\n      var width = image.width,\n          height = image.height,\n          naturalWidth = image.naturalWidth,\n          naturalHeight = image.naturalHeight;\n      var style = {\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      };\n\n      if (!this.state.hasLoaded || !this.state.isZoomed) {\n        return _extends({}, _defaults2.default.styles.zoomImage, this.props.defaultStyles.zoomImage, this.props.style, style);\n      } // Get the the coords for center of the viewport\n\n\n      var viewportX = document.body.clientWidth / 2;\n      var viewportY = window.innerHeight / 2; // Get the coords for center of the original image\n\n      var imageCenterX = imageOffset.left + width / 2;\n      var imageCenterY = imageOffset.top + height / 2; // Get offset amounts for image coords to be centered on screen\n\n      var translateX = viewportX - imageCenterX;\n      var translateY = viewportY - imageCenterY; // Figure out how much to scale the image\n\n      var scale = shouldRespectMaxDimension && !src ? (0, _helpers.getMaxDimensionScale)({\n        width: width,\n        height: height,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        zoomMargin: zoomMargin\n      }) : (0, _helpers.getScale)({\n        width: width,\n        height: height,\n        zoomMargin: zoomMargin\n      });\n      var zoomStyle = {\n        transform: 'translate3d(' + translateX + 'px, ' + translateY + 'px, 0) scale(' + scale + ')'\n      };\n      return _extends({}, _defaults2.default.styles.zoomImage, this.props.defaultStyles.zoomImage, this.props.style, style, zoomStyle);\n    }\n  }], [{\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        zoomImage: {}\n      };\n    }\n  }]);\n\n  return Zoom;\n}(_react.Component);\n\nexports.default = Zoom;\nZoom.propTypes = {\n  defaultStyles: _propTypes.object.isRequired,\n  image: _propTypes.object.isRequired,\n  shouldRespectMaxDimension: _propTypes.bool,\n  zoomImage: (0, _propTypes.shape)({\n    src: _propTypes.string,\n    alt: _propTypes.string,\n    className: _propTypes.string,\n    style: _propTypes.object\n  }).isRequired,\n  zoomMargin: _propTypes.number.isRequired,\n  onUnzoom: _propTypes.func.isRequired\n};\n\nvar TmpImg = function TmpImg(_ref) {\n  var src = _ref.src,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, ['src', 'style']);\n\n  return src ? _react2.default.createElement('img', _extends({}, props, {\n    src: src,\n    style: getTmpStyle(style)\n  })) : null;\n};\n\nvar tmpStyle = {\n  position: 'fixed',\n  visibility: 'hidden'\n};\n\nvar getTmpStyle = function getTmpStyle(style) {\n  return _extends({}, style, tmpStyle);\n};","map":null,"metadata":{},"sourceType":"script"}