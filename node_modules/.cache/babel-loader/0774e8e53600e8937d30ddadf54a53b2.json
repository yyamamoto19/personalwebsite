{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport Lightbox from \"./Lightbox\";\nexport { default as Lightbox } from \"./Lightbox\";\n\nvar _default = function (_Component) {\n  _inherits(_default, _Component);\n\n  function _default() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      modalOpen: false\n    }, _this.toggleModal = function () {\n      _this.setState(function (prev) {\n        return {\n          modalOpen: !prev.modalOpen\n        };\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _default.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        small = _props.small,\n        smallSrcSet = _props.smallSrcSet,\n        medium = _props.medium,\n        large = _props.large,\n        alt = _props.alt,\n        hideDownload = _props.hideDownload,\n        hideZoom = _props.hideZoom,\n        showRotate = _props.showRotate,\n        imageBackgroundColor = _props.imageBackgroundColor;\n    var modalOpen = this.state.modalOpen;\n    return React.createElement(\"div\", null, React.createElement(\"img\", {\n      className: className,\n      style: {\n        cursor: \"pointer\",\n        maxWidth: \"100%\",\n        maxHeight: \"100%\"\n      },\n      onClick: this.toggleModal,\n      src: small,\n      srcSet: smallSrcSet,\n      alt: alt\n    }), modalOpen && React.createElement(Lightbox, {\n      medium: medium,\n      large: large,\n      alt: alt,\n      onClose: this.toggleModal,\n      hideDownload: hideDownload,\n      hideZoom: hideZoom,\n      showRotate: showRotate,\n      imageBackgroundColor: imageBackgroundColor\n    }));\n  };\n\n  return _default;\n}(Component);\n\nexport { _default as default };","map":null,"metadata":{},"sourceType":"module"}